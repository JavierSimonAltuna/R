ui <- fluidPage(
titlePanel("DiamonsApp"),
p("Esta aplicación muestra datos del dataset diamonds"),
sidebarLayout(
sidebarPanel(
selectInput("variable", "Seleccione una variable",
choices = c("carat", "cut", "color", "clarity")),
sliderInput("muestra", "Tamaño de la muestra",
min = 1000,
max = nrow(diamonds),
value = min(5000, nrow(diamonds)),
step = 500, round = 0)
),
mainPanel(
tabsetPanel(
tabPanel("Gráfico de Dispersión", plotOutput("scatterplot")),
tabPanel("Gráfico de Barras", plotOutput("bar")),
tabPanel("Tabla", tableOutput("tabla"))
)
)
)
)
library(shiny)
library(dplyr)
library(ggplot2)
ui <- fluidPage(
titlePanel("DiamonsApp"),
p("Esta aplicación muestra datos del dataset diamonds"),
sidebarLayout(
sidebarPanel(
selectInput("variable", "Seleccione una variable",
choices = c("carat", "cut", "color", "clarity")),
sliderInput("muestra", "Tamaño de la muestra",
min = 1000,
max = nrow(diamonds),
value = min(5000, nrow(diamonds)),
step = 500, round = 0)
),
mainPanel(
tabsetPanel(
tabPanel("Gráfico de Dispersión", plotOutput("scatterplot")),
tabPanel("Gráfico de Barras", plotOutput("bar")),
tabPanel("Tabla", tableOutput("tabla"))
)
)
)
)
server <- function(input, output) {
output$scatterplot <- renderPlot({
ggplot(data = diamonds[sample(nrow(diamonds), input$muestra),],
aes_string(x = input$variable, y = "price")) +
geom_point()
})
output$bar <- renderPlot({
ggplot(data = diamonds[sample(nrow(diamonds), input$muestra),],
aes_string(x = input$variable)) +
geom_bar()
})
output$table <- renderTable({
diamonds[sample(nrow(diamonds), input$muestra),]
})
}
shinyApp(ui = ui, server = server)
install.packages("caret")
library(caret)
install.packages("lattice")
install.packages("lattice")
library(caret)
library(ggplot2)
library(lattice)
library(caret)
modelos <- getModelInfo()
names(modelos)
modelLookup("knn")
modelLookup("neuralnet")
getModelInfo("neuralnet")
data("mtcars")
set.seed(123)
index <- createDataPartition(mtcar$mpg,
p = 0.7,
list = FALSE)
data("mtcars")
set.seed(123)
index <- createDataPartition(mtcar$mpg,
p = 0.7,
list = FALSE)
data("mtcars")
set.seed(123)
index <- createDataPartition(mtcars$mpg,
p = 0.7,
list = FALSE)
train_set <- mtcars[index, ]
test_set <- mtcars[-index, ]
head(test_set)
#Funcion de control
ctrl <- traincontrol(method ="cv", number = 10, verboseIter = TRUE)
#Funcion de control
ctrl <- traincontrol(method ="cv", number = 10, verboseIter = TRUE)
#Funcion de control
ctrl <- trainControl(method ="cv", number = 10, verboseIter = TRUE)
#Regresion lineal
lr_model <- train(mpg)~.,
lr_model <- train(mpg ~ .,
data = train_set,
method ="lm",
trControl = ctrl
)
lr_model
lr_predict <-predict(lr_model, test_set)
lr_rmse <- sqrt(mean(lr_predict-test_set$mpg)^2)
lr_rmse
#KNN model
knn_model <- train(mpg ~ .,
data = train_set,
method ="knn",
trControl = ctrl,
tuneGrid = expand.grid(k = seq(1,20,1))
)
knn_model
knn_predict <- predict(knn_model, test_set)
knn_rmse <- sqrt(mean((knn_predict-test_set$mpg)^2))
knn_rmse
nn_model <- train(mpg ~ .,
data = train_set,
method ="neuralnet",
trControl = ctrl,
tuneGrid = expand.grid(layer1 = =c(1:3), layer2 = c(1:3), layer3 = 0))
nn_model <- train(mpg ~ .,
data = train_set,
method ="neuralnet",
trControl = ctrl,
tuneGrid = expand.grid(layer1 = c(1:3), layer2 = c(1:3), layer3 = 0))
nn_model
nn_predict <- predict(nn_model, test_set)
nn_rmse <- sqrt(mean((nn_predict-test_set$mpg)^2))
nn_rmse
cat("Regresion lineal", lr_rmse, "\n")
cat("KNN", knn_rmse, "\n")
cat("Red Neuronal", nn_rmse, "\n")
nn_model <- train(Species ~ .,
data = train_set,
method ="knn",
trControl = ctrl,
tuneGrid = expand.grid(k = seq(2,15,1)))
train_set <- mtcars[index, ]
test_set <- mtcars[-index, ]
train_set <- iris[index, ]
test_set <- iris[-index, ]
nn_model <- train(Species ~ .,
data = train_set,
method ="knn",
trControl = ctrl,
tuneGrid = expand.grid(k = seq(2,15,1)))
table(train_set$Species)
nn_model <- train(Species ~ .,
data = train_set,
method ="knn",
trControl = ctrl,
tuneGrid = expand.grid(k = seq(2,15,1)))
data(package ="mlbench", PimaIndiansDiabetes2)
head(PimaIndiansDiabetes2)
summary(PimaIndiansDiabetes2)
data<- PimaIndiansDiabetes2 %>%
select(pregnant, glucose, pressure, mass, pedigree, age, diabetes)%>%
na.omit()
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("caret")
install.packages("caret")
data<- PimaIndiansDiabetes2 %>%
select(pregnant, glucose, pressure, mass, pedigree, age, diabetes)%>%
na.omit()
library(caret)
library(dplyr)
data(package ="mlbench", PimaIndiansDiabetes2)
head(PimaIndiansDiabetes2)
summary(PimaIndiansDiabetes2)
data<- PimaIndiansDiabetes2 %>%
select(pregnant, glucose, pressure, mass, pedigree, age, diabetes)%>%
na.omit()
data<- PimaIndiansDiabetes2 %>%
select(pregnant, glucose, pressure, mass, pedigree, age, diabetes)%>%
na.omit()
index
train_set <- data[index,]
test_set <- data[-index,]
ctrl = trainControl(method = "cv", number =8, verBoseIter = TRUE)
ctrl = trainControl(method = "cv", number =8, verboseIter = TRUE)
knn_model <- train(diabetes ~ .,
data = train_set,
method = "knn",
trControl = ,
trControl = ,
)
knn_params = expand.grid(k=c())
knn_params = expand.grid(k=c(2:20))
knn_model <- train(diabetes ~ .,
data = train_set,
method = "knn",
trControl = ctrl,
trControl = knn_params)
knn_model <- train(diabetes ~ .,
data = train_set,
method = "knn",
trControl = ctrl,
tuneGrid = knn_params)
knn_model
knn_model <- train(diabetes ~ .,
data = train_set,
method = "knn",
trControl = ctrl,
tuneGrid = knn_params)
knn_model
plot(knn_model)
confusionMatrix((knn_predict, test_set$diabetes))
confusionMatrix(knn_predict, test_set$diabetes)
knn_predict <- predict(knn_model, test_set)
confusionMatrix(knn_predict, test_set$diabetes)
summary (test_set$diabetes)
glm_model <- train(diabetes ~ .,
data = train_set,
method = "glm",
trControl = ctrl,
tuneGrid = knn_params)
glm_model <- train(diabetes ~ .,
data = train_set,
method = "glm",
trControl = ctrl,
tuneGrid = knn_params)
gm_model <- train(diabetes ~ .,
data = train_set,
method = "glm",
trControl = ctrl,
tuneGrid = knn_params)
gm_model <- train(diabetes ~ .,
data = train_set,
method = "glm",
trControl = ctrl,
tuneGrid = NULL)
gm_model
plot(gm_model)
gm_model
glm_predict <- predict(gm_model, test_set)
confusionMatrix(gm_predict, test_set$diabetes)
glm_predict <- predict(gm_model, test_set)
confusionMatrix(glm_predict, test_set$diabetes)
#RSQLite
# Crear una conexion a una base de datos SQLite
con <- dbConnect(RSQLite::SQLite(), "inventario.sqlite")
install.packages("RSQLite")
library(RSQLite)
#RSQLite
# Crear una conexion a una base de datos SQLite
con <- dbConnect(RSQLite::SQLite(), "C:\Users\jsimo\OneDrive\Escritorio\GESTION EPI'S\inventario.sqlite")
#RSQLite
# Crear una conexion a una base de datos SQLite
con <- dbConnect(RSQLite::SQLite(), "C:/Users/jsimo/OneDrive/Escritorio/GESTION EPI'S/inventario.sqlite")
plot (con)
head(con)
#RSQLite
# Crear una conexion a una base de datos SQLite
con <- dbConnect(RSQLite::SQLite(), "C:/Users/jsimo/OneDrive/Escritorio/GESTION EPI'S/inventario.sqlite")
head(con)
resultado <- dbGetQuery(con, "SELECT * ")
resultado <- dbGetQuery(con, "SELECT * ALL")
tablas <- dbListTables(con)
tablas
resultado <- dbGetQuery(con, "SELECT * ALL")
resultado <- dbGetQuery(con, "SELECT * productos")
resultado <- dbGetQuery(con, "SELECT * ID")
##POSTGREESQL
nombre_usuario <- "Postgrees"
contraseña <- "Postgrees"
host <- "localhost"
puerto <- 5432
nombre_base_de_datos <- "tu_base_de_datos"
library(DBI)
con <- dbConnect(odbc::odbc(), .connection_string = "Driver={SQL Server};", timeout = 10)
con <- dbConnect(RSQLite::SQLite(), "C:/Users/jsimo/OneDrive/Escritorio/GESTION EPI'S/inventario.sqlite")
resultado <- dbGetQuery(con, "SELECT * FROM")
tablas <- dbListTables(con)
tablas
